##  User Paramaters
##  BED_TEMP      : Target temperature for the Bed. Is also used to decide 
##                  if heatsoak is needed
##  EXTRUDER_TEMP : Target temperature for the Extruder
##  CHAMBER_TEMP  : Target temperature for the chamber fan controll
##  SOAK          : Soak time in minutes
##  DELTA_B       : Allowed delta between actual bed temperature and target
##                  temperature for the decision if heat soak is needed.
##  DELTA_C       : Allowed delta between actual chamber temperature and target
##                  will wait until target reached or time is zero
##  CHAMBER_SOAK  : Extra Soak time if Chamber is not on target - DELTA_C
##  EXTRA_SOAK    : Enables Chamber Soak ('true'/'false')
##  LAYER_HEIGHT  : Hight of prime_line should be set to layer_hight
##  Z_ADJUST      : Add extra z offset via slicer
##  FILTER        : Activate Nevermore 1 On 0 Off default On
[gcode_macro PRINT_START]
description: All cmd needed at print start
variable_var: {'temp'        : {'extruder': 245.0, 'bed': 100.0, 'chamber': 40.0, 'endstop': 0.0},
               'delta'       : {'chamber': 5.0, 'bed': 10},
               'time'        : {'soak' : 2, 'soak_extra': 2},
               'redo_qgl'    : True,
               'prime_height': 0.0,
               'z_adjust'    : 0.0,
               'filter'      : True}
## Valid state 
##   Prepare    : Store Params
##   HeatBed    : heat up bed and decide if soak is needed 
##   HeatSoak   : loop the time specified with SOAK
##   Chamber    : decide if extra soak is needed
##   ChamberSoak: loop the time specified with EXTRA_SOAK or Chamber target reached
##   Final      : all what needs to be done after wait time
variable_state: 'Prepare'
gcode:
  {% set user   = printer['gcode_macro _USER_VARIABLE'] %}
  {% set actBed = printer['temperature_sensor bed'].temperature|float|round(1) if 'temperature_sensor bed' in printer 
             else printer.heater_bed.temperature|float|round(1) %} ; get actual temp from extra sensor or heater sensor
  ##############################  Prepare phase only done at the first exection of PRINT_START  ##############################
  {% if state == 'Prepare' %}
    #############  Store input parameters  #############
    {% set var = {'temp': {'extruder': params.EXTRUDER_TEMP|default(245)|float|round(1),
                           'pre_extru': params.EXTRUDER_TEMP|default(245)|float|round(1),
                           'bed'     : params.BED_TEMP|default(100)|float|round(1),
                           'chamber' : params.CHAMBER_TEMP|default(30)|float|round(1),
                           'endstop' : 0.0},
                  'delta': {'chamber': params.DELTA_C|default(5)|float|round(1), 
                            'bed'    : params.DELTA_B|default(10)|float|round(1)},
                  'time' : {'soak'      : params.SOAK|default(1)|int * 60,
                            'soak_extra': params.CHAMBER_SOAK|default(15)|int * 60 if params.EXTRA_SOAK|default('true') == 'true' and 
                                                                                      user.hw.chamber.ena 
                                          else 0},
               'redo_qgl'    : True,
               'prime_height': params.LAYER_HEIGHT|float * user.print_start.prime_mult|float if LAYER_HEIGHT in params
                          else user.prime.pos.z|float,
               'z_adjust'    : params.Z_ADJUST|default(0.0)|float,
               'filter'      : False if params.FILTER|default(1)|int == 0 else True} %}
    {% if user.hw.relay.ena %} _HEATER_ON {% endif %}
    {% if user.hw.caselight.ena %} _CASELIGHT_ON {% endif %}             ; switch on light
    {% if user.hw.display.ena %} _LCD_KNOB COLOR=RED BLINK=1 {% endif %}
    {% if user.hw.chamber.fan %} M141 S0  {% endif %}                    ; exhaust fan off
    {% if user.hw.filter.ena and var.filter %} _FILTER_ON {% endif %}    ; activate filter
    _CG28                                                                ; home if needed
    G90                                                                  ; absolute position
    G0 Z{user.park.bed.z} F{user.speed.z_hop}                            ; move nozzle to z high first
    G0 X{user.park.bed.x} Y{user.park.bed.y} F{user.speed.travel}        ; home to get toolhead in the middle
    PAUSE_BASE
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=False
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatBed"'
    UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
  ##############################  HeatBed Phase heat up the bed  ##############################    
  {% elif state == 'HeatBed' %}
    # get max allow bed temp from config. Lower it by 5C to avoid shutdown
    {% set cfg_bed_max = printer.configfile.settings.heater_bed.max_temp|float|round(1) - 5.0 %}
    {% set targetBed = var.temp.bed - var.delta.bed %}
    {% set soakBed = [(var.temp.bed + user.print_start.bed_up), cfg_bed_max]|min %}
    {% if (var.time.soak <= 0) or (actBed >= targetBed) %}  ; check if soak time is 0 or if the bed is still hot
      M117 Heating Extruder
      {% set text = 'heat soak disabled' if var.time.soak <= 0 else 'heat soak not needed' %}
      _PRINT_AR T="{"Bed temp: act %3.1f°C min %3.1f°C (target(%3.1f°C) - delta(%2.1f°C)) %s" % 
                    (actBed,targetBed,var.temp.bed,var.delta.bed,text)}"
      {% set _dummy = var.update({'redo_qgl' : False}) %}
      M140 S{var.temp.bed}      ; heat bed
      M109 S{var.temp.extruder} ; heat extruder and wait
      M190 S{var.temp.bed}      ; heat bed and wait
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
    {% else %}
      M117 Heating Bed
      _PRINT_AR T="{"Bed temp: act %3.1f°C min %3.1f°C (target(%3.1f°C) - delta(%2.1f°C)) heat soak needed" % 
                   (actBed,targetBed,var.temp.bed,var.delta.bed)}"
      _PRINT_AR T="{"Set Bed temp to %3.1f°C instead of %3.1f°C for faster heat soak" % (soakBed,var.temp.bed)}"    
      M106 S90              ; switch part cooling ~35% to move air in chamber
      M140 S{soakBed}       ; heat bed
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"HeatSoak"'
      {% set next_duration = user.print_start.ival if var.time.soak > user.print_start.ival else var.time.soak %}
      {% set _dummy = var.time.update({'soak': var.time.soak - user.print_start.ival}) if var.time.soak > user.print_start.ival 
                 else var.time.update({'soak': 0}) %}
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={next_duration}
    {% endif%}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    #_RUNOUT_INFO    
  ##############################  Heatsoak Phase call the delay macro until time is over  ##############################
  {% elif state == 'HeatSoak' %}
    #############  Get filament runout info  #############
    {% if user.hw.runout.sensor %}
      {% if printer["filament_" + user.hw.runout.type + "_sensor runout"].enabled|lower == 'true' %}
        {% set filament_detected = printer["filament_" + user.hw.runout.type + "_sensor runout"].filament_detected %}
      {% elif 'filament_loaded' in printer.save_variables.variables %}
        {% set filament_detected = printer.save_variables.variables.filament_loaded %}
      {% else %}
        {% set filament_detected = True %}
      {% endif %}
    {% elif user.hw.runout.type == 'file' %}
      {% set filament_detected = printer.save_variables.variables.filament_loaded %}
    {% else %}
      {% set filament_detected = True %}
    {% endif %}
    {% if filament_detected %}
      {% if var.time.soak <= (user.print_start.time.extruder + var.temp.extruder - 240) and 
             var.temp.extruder != printer.extruder.target %} ; check time to start heating extruder
        M104 S180 ; heat extruder
      {% endif %}
      {% if var.time.soak <= user.print_start.time.bed and bed != printer.heater_bed.target|int %}  ; check time to reduce bed temp
        M140 S{var.temp.bed} ; heat bed
      {% endif %}
      {% if var.time.soak > 0 %} ; check remaining time
        {% set next_duration = var.time.soak if user.print_start.ival >= var.time.soak else user.print_start.ival %}
        {% set _dummy = var.time.update({'soak': 0}) if user.print_start.ival >= var.time.soak 
                   else var.time.update({'soak': var.time.soak - user.print_start.ival}) %}}
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={next_duration}
      {% else %}
        SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Chamber"'
        UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
        _PRINT_AR T="{"Bed act temp=%3.1fC heat soak done" % (actBed)}"
      {% endif%}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    {% else %}
      _PRINT_AR T="No Filament loaded, print aborded!"
      CANCEL_PRINT PARK=1 ERROR=1
    {% endif %}
  ##############################  Decide if extended soaking is needed  ##############################
  {% elif state == 'Chamber' %}
    {% set targetChamber = var.temp.chamber - var.delta.chamber %}
    {% set actChamber = printer["temperature_" + user.hw.chamber.type + " chamber"].temperature|round(1) if user.hw.chamber.ena
                   else 0 %}
    {% if var.time.soak_extra > 0 and actChamber < targetChamber %}
      _PRINT_AR T="{"Chamber temp: act %2.1f°C min %2.1f°C (target(%2.1f°C) - delta(%2.1f°C)) extra heat soak needed" %
                    (actChamber,targetChamber,var.temp.chamber,var.delta.chamber)}"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"ChamberSoak"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
    {% else %}
      {% set text = 'extra heat soak disabled' if var.time.soak_extra <= 0 else 'extra heat soak not needed' %}
      _PRINT_AR T="{"Chamber temp: act %2.1f°C min %2.1f°C (target(%2.1f°C) - delta(%2.1f°C)) %s" % 
                    (actChamber,targetChamber,var.temp.chamber,var.delta.chamber,text)}"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Final"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5  
    {% endif %}
  ############################## extra Heat Soak terminated by chamber temp  ##############################
  {% elif state == 'ChamberSoak' %}
    {% set targetChamber = var.temp.chamber - var.delta.chamber %}
    {% set actChamber = printer["temperature_" + user.hw.chamber.type + " chamber"].temperature|round(1) if user.hw.chamber.ena
                   else 0 %}
    {% if var.time.soak_extra > 0 and actChamber < targetChamber %} ; check remaining time and temp difference
      {% set next_duration = var.time.soak_extra if user.print_start.ival >= var.time.soak_extra else user.print_start.ival %}
      {% set _dummy = var.time.update({'soak_extra': 0}) if user.print_start.ival >= var.time.soak_extra
                 else var.time.update({'soak_extra': var.time.soak_extra - user.print_start.ival}) %}}
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION={next_duration}
    {% else %}
      {% set text = 'extra heat soak timed out' if var.time.soak_extra == 0 else 'chamber temp reached' %}
      _PRINT_AR T="{"Chamber temp: act %2.1f°C min %2.1f°C (target(%2.1f°C) - delta(%2.1f°C)) %s" % 
                    (actChamber,targetChamber,var.temp.chamber,var.delta.chamber,text)}"
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Final"'
      UPDATE_DELAYED_GCODE ID=_START_PRINT_WAIT DURATION=0.5
    {% endif %}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
  ##############################  all whats need to run at the end  ##############################
  {% elif state == 'Final' %}
    RESUME_BASE
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"' ; set state for next print    
    {% if user.hw.display.ena %} _LCD_KNOB COLOR=RED  {% endif %}
    M106 S0                                                               ; turn off part cooling fan
    G34                                                                   ; home & QGL
    {% if user.hw.chamber.fan %} M141 S{var.temp.chamber} {% endif %}     ; set target temp for exhaust fan
    NOZZLECLEAN
    SET_GCODE_VARIABLE MACRO=_HOME_Z VARIABLE=calibrate_z_next VALUE={user.hw.auto_z_offset.auto}
    G28 Z
    {% if user.hw.auto_z_offset.auto %} CALIBRATE_Z {% endif %}
    {% if user.hw.auto_z_offset.manu %} _SET_PLATE_OFFSET {% endif %}
    SET_GCODE_OFFSET Z_ADJUST={var.z_adjust} MOVE=1
    M109 S{var.temp.extruder} ; heat extruder and wait
    _PRINT_OFFSET
    PRIME_LINE PRIME_HEIGHT={var.prime_height}
    {% if user.hw.endstop_temp.ena %}
      {% set _dummy = var.temp.update({'endstop': printer['temperature_sensor endstop'].temperature}) %}
      SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=var VALUE="{var}"
    {% endif %}
    G21                                                 ; set units to millimeters
    G90                                                 ; use absolute coordinates
    M83                                                 ; use relative distances for extrusion
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  {% endif %}    
 
[delayed_gcode _START_PRINT_WAIT]
gcode:
  {% macro print_time(text, time) %} ; print remaining time
    M117 {'%s' % text} {(time|int // 60)}:{'%02d' % (time|int % 60)}
  {% endmacro %}
  {% if printer['gcode_macro PRINT_START'].state == 'HeatSoak'%}
   { print_time("HEAT SOAK", printer['gcode_macro PRINT_START'].var.time.soak) }
  {% elif printer['gcode_macro PRINT_START'].state == 'ChamberSoak' %}
    { print_time("SOAK", printer['gcode_macro PRINT_START'].var.time.soak_extra) }
  {% endif %}
  # Check CANCLE_PRINT was executed
  {% if printer['gcode_macro CANCEL_PRINT'].execute|lower == 'false' %}
    PRINT_START  ; Junp back to PRINT_START
  {% else %} ; break loop and insure state is correct for the next print start
    SET_GCODE_VARIABLE MACRO=CANCEL_PRINT VARIABLE=execute VALUE=False
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=state VALUE='"Prepare"'
    UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1
  {% endif %}
  
[gcode_macro PRINT_END]
description: All commands after the print
gcode:
  {% set user       = printer['gcode_macro _USER_VARIABLE'] %}
  {% set filter_off = user.peripheral.filter.run_after_print %}
  {% set vent_on    = user.peripheral.vent.on_val %}
  {% set vent_off   = user.peripheral.vent.run_after_print %}
  # calculate save move
  {% set max = printer.toolhead.axis_maximum %}
  {% set act = printer.toolhead.position %}
  {% set safe = {'x': 20.0 if act.x|float < (max.x|float - 20.0) else -20.0,
                 'y': 20.0 if act.y|float < (max.y|float - 20.0) else -20.0,
                 'z':  2.0 if act.z|float < (max.z|float -  2.0) else (max.z|float - act.z|float)} %}
  M400                                                              ; wait for buffer to clear
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
  G92 E0                                                            ; zero the extruder
  M83                                                               ; relative extrusion
  G1 E-{user.filament.retract.end} F{user.speed.retract}            ; retract filament
  G91                                                               ; relative positioning
  G0 X{safe.x} Y{safe.y} Z{safe.z} F{user.speed.travel}             ; move nozzle to remove stringing
  TURN_OFF_HEATERS                                                  ; turn off heaters
  M107                                                              ; turn off fan
  {% if user.hw.chamber.fan %} M141 S{vent_on} {% endif %}          ; vent chamber (setting fan to below ambient)
  G90                                                               ; absolute positioning
  G0 X{user.park.pause.x} Y{user.park.pause.y} F{user.speed.travel} ; park nozzle at brush bin
  _ADD_PRINT_TIME
  _SD_PRINT_STATS R='done'
  _SD_PRINTER_STATS
  {% if user.hw.display.ena %} _LCD_KNOB COLOR=GREEN {% endif %}
  {% if user.hw.caselight.ena %} _CASELIGHT_OFF {% endif %}
  {% if user.hw.chamber.fan %} UPDATE_DELAYED_GCODE ID=_DELAY_VENT_OFF DURATION={vent_off} {% endif %}
  {% if user.hw.filter.ena %} UPDATE_DELAYED_GCODE ID=_DELAY_FILTER_OFF DURATION={filter_off} {% endif %}
  {% if user.hw.endstop_temp.ena %} 
    {action_respond_info("PRINT_END
                          BED temp: act %3.1f°C
                          Endstop temp: start %3.1f°C end %3.1f°C" % (printer['temperature_sensor bed'].temperature if 'temperature_sensor bed' in printer 
                                                                 else printer.heater_bed.temperature, 
                                                                      printer['gcode_macro PRINT_START'].var.temp.endstop,
                                                                      printer['temperature_sensor endstop'].temperature))}
  {% endif %}
  {% if user.unload_sd|lower == 'true' %} UPDATE_DELAYED_GCODE ID=_DELAY_SDCARD_RESET_FILE DURATION=10 {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=10
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END
  M220 S100 ; set feedrate percentage back to default
  M221 S100 ; set speed percentage back to default

[gcode_macro G34]
description: Reset bed mesh, offset and execute QGL
gcode:
  _PRINT_AR T="Home & QGL" SHOW_LCD=true
  BED_MESH_CLEAR
  SET_GCODE_OFFSET Z=0 MOVE=1
  {% if printer['gcode_macro PRINT_START'].var.redo_qgl|lower == 'true' %}
    _PRINT_AR T="QGL forced by PRINT_START"
    QUAD_GANTRY_LEVEL PARK=false HOME=false
  {% elif printer.quad_gantry_level.applied|lower == 'false' %} %} 
    _PRINT_AR T="QGL not executed yet"
    QUAD_GANTRY_LEVEL PARK=false HOME=false
  {% endif %}
  UPDATE_DELAYED_GCODE ID=_CLEAR_DISPLAY DURATION=1

[gcode_macro M204]
description: Set and limit acceleration to cfg value
rename_existing: M204.1
gcode:
  {% set accel = params.S|float                      if 'S' in params and params.S|float > 0
            else [params.P|float,params.T|float]|min if 'P' in params and 'T' in params and 
                                                     params.P|float > 0 and params.T|float > 0 %}
  {% if accel is defined %}  
    {% set lim_accel          = [accel,     printer.configfile.settings.printer.max_accel         ]|min %}
    {% set lim_accel_to_decel = [accel / 2, printer.configfile.settings.printer.max_accel_to_decel]|min %}
    SET_VELOCITY_LIMIT ACCEL={lim_accel} ACCEL_TO_DECEL={lim_accel_to_decel}
  {% else %}
    {action_respond_info("Invalid M204 command \"M204 %s\"" % rawparams)}
  {% endif %}
  
[gcode_macro M900]
description: Set pressure advance
gcode:
  SET_PRESSURE_ADVANCE ADVANCE={params.K|default(0)}

[gcode_macro _PRINT_OFFSET]
description: Helper: Print gcode offsets defined by script or user in PRINT_START
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set text = ["GCODE OFFSET for Z applied from:"] %}
  {% if user.hw.auto_z_offset.manu %}
    {% set _dummy = text.append("Plate %s %.3fmm" % 
           (printer.save_variables.variables.plates.array[printer.save_variables.variables.plates.index].name,
            printer.save_variables.variables.plates.array[printer.save_variables.variables.plates.index].offset)) %}
  {% endif %}
  {% if user.hw.auto_z_offset.auto %}
    {% set _dummy = text.append("Z_CALIBRATE %.3fmm" % printer.z_calibration.last_z_offset) %}
  {% endif %}
  {% set _dummy = text.append("User %.3fmm" % printer['gcode_macro PRINT_START'].var.z_adjust) %}
  {% set _dummy = text.append("Total %.3fmm" % printer.gcode_move.homing_origin.z) %}
  {action_respond_info(text|join("\n"))}

[gcode_macro _RUNOUT_INFO]
description: Helper: Print runout sensor status
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  {% set out = ['RUNOUT: ' + user.hw.runout.type|capitalize + ' Sensor'] if user.hw.runout.sensor
          else ['RUNOUT: Stored in file']                                if user.hw.runout.type == 'file'
          else ['RUNOUT: Not monitored'] %}

  {% set enable = printer["filament_" + user.hw.runout.type + "_sensor runout"].enabled if user.hw.runout.sensor
             else False %}
  {% set _dummy = out.append('Enabled: ' + enable|lower) if user.hw.runout.sensor %}
  {% set detected = printer["filament_" + user.hw.runout.type + "_sensor runout"].filament_detected if enable
               else printer.save_variables.variables.filament_loaded                                if user.hw.runout.type == 'file' %}
  {% set _dummy = out.append('Detect Filament: ' + detected|lower) if detected is defined %}
  {action_respond_info(out|join("\n"))}

## PrusaSlicer/SuperSlicer:
## Add at the start gcode section
## _LAYER TOTAL=[total_layer_count] RESPOND=0
##
## Add at the layer change gcode section
## _LAYER CURRENT={layer_num+1}
[gcode_macro _LAYER]
description: Pass the current layer and the total amount of layers by your Slicer.
variable_layer: {'current': 0, 'total':0}
gcode:
  {% set _dummy = layer.update({'total':params.TOTAL|int}) if ('TOTAL' in params and params.TOTAL|int > 0) %}
  {% set _dummy = layer.update({'current':params.CURRENT|default(0)|int}) %}
  SET_GCODE_VARIABLE MACRO=_LAYER VARIABLE=layer VALUE="{layer}"
  {% if params.RESPOND|default(printer['gcode_macro _USER_VARIABLE'].respond.layer)|int == 1 %}
    {action_respond_info("Layer %s of %s" % (layer.current, layer.total))}
  {% endif %}

[gcode_macro TOGGLE_LAYER_OUTPUT]
description: Enable/Disable Console output of _LAYER
gcode:
  {% set respond = printer['gcode_macro _USER_VARIABLE'].respond %}
  {% set _dummy = respond.update({'layer':1}) if respond.layer|int == 0 else respond.update({'layer':0}) %}
  SET_GCODE_VARIABLE MACRO=_USER_VARIABLE VARIABLE=respond VALUE="{respond}"

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(5.0)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  ##### get user parameters or use default ##### 
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set idle_timeout = client.idle_timeout|default(0) %}
  {% set temp = printer[printer.toolhead.extruder].target if printer.toolhead.extruder != '' else 0 %}
  {% set restore = False if printer.toolhead.extruder == ''
              else True  if params.RESTORE|default(1)|int == 1 else False %}
  ##### end of definitions #####
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=last_extruder_temp VALUE="{{'restore': restore, 'temp': temp}}"
  # set a new idle_timeout value
  {% if idle_timeout > 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=restore_idle_timeout VALUE={printer.configfile.settings.idle_timeout.timeout}
    SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}
  {% endif %}
  PAUSE_BASE
  {client.user_pause_macro|default("")}
  _TOOLHEAD_PARK_PAUSE_CANCEL {rawparams}

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
variable_last_extruder_temp: {'restore': False, 'temp': 0}
variable_restore_idle_timeout: 0
variable_idle_state: False
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_move = client.speed_move|default(velocity) %}
  {% set runout_resume = True if client.runout_sensor|default("") == ""     # no runout
                    else True if not printer[client.runout_sensor].enabled  # sensor is disabled
                    else printer[client.runout_sensor].filament_detected %} # sensor status
  {% set can_extrude = True if printer.toolhead.extruder == ''           # no extruder defined in config
                  else printer[printer.toolhead.extruder].can_extrude %} # status of active extruder
  {% set do_resume = False %}
  {% set prompt_txt = [] %}
  ##### end of definitions #####
  #### Printer comming from timeout idle state ####
  {% if printer.idle_timeout.state|upper == "IDLE" or idle_state %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
    {% if last_extruder_temp.restore %}
      # we need to use the unicode (\u00B0) for the ° as py2 env's would throw an error otherwise 
      RESPOND TYPE=echo MSG='{"Restoring \"%s\" temperature to %3.1f\u00B0C, this may take some time" % (printer.toolhead.extruder, last_extruder_temp.temp) }'
      M109 S{last_extruder_temp.temp}
      {% set do_resume = True %}
    {% elif can_extrude %}
      {% set do_resume = True %}
    {% else %} 
      RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
      {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
    {% endif %}
  #### Printer comming out of regular PAUSE state ####
  {% elif can_extrude %}
    {% set do_resume = True %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder}'
    {% set _d = prompt_txt.append("\"%s\" not hot enough, please heat up again and press RESUME" % printer.toolhead.extruder) %}
  {% endif %}
  {% if runout_resume %}
    {% if do_resume %}
      {% if restore_idle_timeout > 0 %} SET_IDLE_TIMEOUT TIMEOUT={restore_idle_timeout} {% endif %} # restore idle_timeout time
      {client.user_resume_macro|default("")}
      _CLIENT_EXTRUDE
      RESUME_BASE VELOCITY={params.VELOCITY|default(sp_move)}
    {% endif %}
  {% else %}
    RESPOND TYPE=error MSG='{"Resume aborted !!! \"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]}'
    {% set _d = prompt_txt.append("\"%s\" detects no filament, please load filament and press RESUME" % (client.runout_sensor.split(" "))[1]) %}
  {% endif %}
  ##### Generate User Information box in case of abort #####
  {% if not (runout_resume and do_resume) %} 
    RESPOND TYPE=command MSG="action:prompt_begin RESUME aborted !!!"
    {% for element in prompt_txt %}
      RESPOND TYPE=command MSG='{"action:prompt_text %s" % element}' 
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_footer_button Ok|RESPOND TYPE=command MSG=action:prompt_end|info"
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}
  
# Usage: SET_PAUSE_NEXT_LAYER [ENABLE=[0|1]] [MACRO=<name>]
[gcode_macro SET_PAUSE_NEXT_LAYER]
description: Enable a pause if the next layer is reached
gcode:
  {% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
  {% set ENABLE = params.ENABLE|default(1)|int != 0 %}
  {% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

# Usage: SET_PAUSE_AT_LAYER [ENABLE=[0|1]] [LAYER=<number>] [MACRO=<name>]
[gcode_macro SET_PAUSE_AT_LAYER]
description: Enable/disable a pause if a given layer number is reached
gcode:
  {% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
  {% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
             else params.LAYER is defined %}
  {% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
  {% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
  SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

# Usage: SET_PRINT_STATS_INFO [TOTAL_LAYER=<total_layer_count>] [CURRENT_LAYER= <current_layer>]
[gcode_macro SET_PRINT_STATS_INFO]
rename_existing: SET_PRINT_STATS_INFO_BASE
description: Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer: { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer  : { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode:
  {% if pause_next_layer.enable %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_next_layer" % pause_next_layer.call}'
    {pause_next_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_NEXT_LAYER ENABLE=0
  {% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
    RESPOND TYPE=echo MSG='{"%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer)}'
    {pause_at_layer.call} ; execute the given gcode to pause, should be either M600 or PAUSE
    SET_PAUSE_AT_LAYER ENABLE=0
  {% endif %}
  SET_PRINT_STATS_INFO_BASE {rawparams}
  
##### internal use #####
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
  {% set custom_park_x  = client.custom_park_x|default(0.0) %}
  {% set custom_park_y  = client.custom_park_y|default(0.0) %}
  {% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
  {% set sp_hop         = client.speed_hop|default(15) * 60 %}
  {% set sp_move        = client.speed_move|default(velocity) * 60 %}
  ##### get config and toolhead values #####
  {% set origin    = printer.gcode_move.homing_origin %}
  {% set act       = printer.gcode_move.gcode_position %}
  {% set max       = printer.toolhead.axis_maximum %}
  {% set cone      = printer.toolhead.cone_start_z|default(max.z) %} ; height as long the toolhead can reach max and min of an delta
  {% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
                else False %}
  ##### define park position #####
  {% set z_min = params.Z_MIN|default(0)|float %}
  {% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
  {% set x_park = params.X       if params.X is defined
             else custom_park_x  if use_custom
             else 0.0            if round_bed
             else (max.x - 5.0) %}
  {% set y_park = params.Y       if params.Y is defined
             else custom_park_y  if use_custom
             else (max.y - 5.0)  if round_bed and z_park < cone
             else 0.0            if round_bed
             else (max.y - 5.0) %}
  ##### end of definitions #####
  _CLIENT_RETRACT
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    G1 Z{z_park} F{sp_hop}
    G1 X{x_park} Y{y_park} F{sp_move}
    {% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
  {% else %}
    RESPOND TYPE=echo MSG='Printer not homed'
  {% endif %}
  
[gcode_macro _CLIENT_EXTRUDE]
description: Extrudes, if the extruder is hot enough
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
  {% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
  {% set absolute_extrude = printer.gcode_move.absolute_extrude %}
  ##### end of definitions #####
  {% if printer.toolhead.extruder != '' %}
    {% if printer[printer.toolhead.extruder].can_extrude %}
      {% if use_fw_retract %}
        {% if length < 0 %}
          G10
        {% else %}
          G11
        {% endif %}
      {% else %}
        M83
        G1 E{length} F{(speed|float|abs) * 60}
        {% if absolute_extrude %}
          M82
        {% endif %}
      {% endif %}
    {% else %}
      RESPOND TYPE=echo MSG='{"\"%s\" not hot enough" % printer.toolhead.extruder}'
    {% endif %}
  {% endif %}

[gcode_macro _CLIENT_RETRACT]
description: Retracts, if the extruder is hot enough
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
  {% set speed = params.SPEED|default(client.speed_retract)|default(35) %}

  _CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}